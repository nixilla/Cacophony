<?php

/**
 * PluginTokenTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    sfCacophonyPlugin
 * @subpackage model
 * @author     Janusz Slota <janusz.slota@nixilla.com>
 */
class PluginTokenTable extends Doctrine_Table
{

  /**
   * Returns an instance of this class.
   *
   * @return object PluginTokenTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('PluginToken');
  }
  
  /**
   * Saves all tokens from session to database
   * 
   * @param sfEvent $event 
   * @return void
   */
  public static function saveTokenForUser(sfEvent $event)
  {
    foreach($event->getSubject()->getAttributeHolder()->getNamespaces() as $namespace)
    {
      if(substr($namespace, 0, 18) == 'sfCacophonyPlugin/')
      {
        $t = Doctrine_Core::getTable('Token')->findOneByUserAndProvider($event->getSubject()->getGuardUser(), substr($namespace, 18));
        
        if( ! $t) $t = new Token();
        
        $me = $event->getSubject()->getAttribute('me',null,$namespace);
        $t->setProvidersUserId($me['providers_user_id']);
        $t->setContent($event->getSubject()->getAttribute('accessToken',null,$namespace));
        $t->setProvider(substr($namespace, 18));
        $t->setUser($event->getSubject()->getGuardUser());
        $t->save();   
      }
    }
  }
  
  /**
   * Implementation of the dynamic finder
   * 
   * @param sfGuardUser $user
   * @param String $provider
   * @return Doctrine_Record type 
   */
  public function findOneByUserAndProvider(sfGuardUser $user, $provider)
  {
    return $this->createQuery()
      ->where('sf_guard_user_id = ?',$user->getId())
      ->andWhere('provider = ?',$provider)
      ->fetchOne();
  }
  
  /**
   *
   * @param type $id
   * @param type $provider
   * @return sfGuardUser
   */
  public function getUserByProvidersUserIdAndProvider($id,$provider)
  {
    $token = $this->createQuery('t')
      ->innerJoin('t.User u')
      ->where('t.providers_user_id = ?',$id)
      ->andWhere('t.provider = ?',$provider)
      ->fetchOne();
    
    return $token['User'];
  }
}